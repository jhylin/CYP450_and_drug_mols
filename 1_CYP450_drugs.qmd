---
title: "Cytochrome P450 and small molecules"
author: Jennifer HY Lin
date: '2024-6-28'
draft: true
categories: 
    - Toxicology
    - RDKit
    - ChEMBL database
    - Python
jupyter: python3
format: html
bibliography: references.bib
---

Something about drug toxicology.

Seems to involve (in a very rough sense) 3 main types: structural alerts (in relation to known adverse effects or PAINs), Human ether-a-go-go-related gene (hERG) potassium channel and cytochrome P450 (CYP450) enzymes. There are most likely more as well (need to look further into).

Recent commentary that mentions about "avoidome" - "Structure is beauty, but not always truth" (cite: https://doi.org/10.1016/j.cell.2024.01.003) - DMPK-related proteins to avoid - also mentioned two other blog posts which have reviewed this commentary recently (interesting view points).

Many have looked into structural alerts (one example repo - rd_filters). ChEMBL database also has a cheminformatic utils web service that provides structural alert computation for compounds. There are most likely many more (probably need to search for more).

hERG potassium channel is also another frequently-looked aspect for drug toxicology due to its effect on cardiac QT prolongation.

CYP450 enzymes also play a key role in the toxicology part of ADMET process of therapeutic drugs, I thought to look into the relationship between CYP450 and small drug molecules initially to see if there is anything interesting for further explorations.

##### **Extracting data**

```{python}
import pandas as pd
import chembl_downloader
from chembl_downloader import latest
```

```{python}
# Latest version of ChEMBL
# latest_version = latest()
# print(f"The latest ChEMBL version is: {latest_version}")
```

I'm using SQL via chembl_downloader again to download approved drugs with their ChEMBL ID and equivalent canonical SMILES. All of the CYP3A4 inhibitors extracted from ChEMBL are based on the [Flockhart table of drug interactions](https://drug-interactions.medicine.iu.edu/MainTable.aspx).

A bit about retrieving data here, the following might not be the best way to get the data, but I've resorted to simple SQL via using chembl_downloader's query(). Another possible way is to use get_target_sql(), e.g. using a specific CYP enzyme as the protein target to retrieve data, but it appears that there are no clear data marked to indicate the potency of CYP inhibition or induction (i.e. weak, moderate or strong) in the ChEMBL database (an example link for CYP2D6 in ChEMBL - https://www.ebi.ac.uk/chembl/web_components/explore/activities/STATE_ID:pxs_ydUxNelxmAa9ckYEPw%3D%3D). The Flockhart table has clearly annotated each approved drug with journal paper citations, so I'm going to stick with the SQL way here.

Initially, four categories of approved drugs are retrieved - strong CYP3A4/5 inhibitors, moderate CYP3A4/5 inhibitors, strong CYP2D6 inhibitors and moderate CYP2D6 inhibitors.

This group of drugs inhibiting CYP3A4/5 is the largest cohort of all the cytochrome inhibitors. When a drug behaves like a cytochrome inhibitor, it inhibits the activity of a particular cytochrome enzyme e.g. CYP3A4 leading to a reduction of clearance of a particular therapeutic drug e.g. a CYP3A4 substrate such as apixaban, thus increasing its plasma concentration in vivo causing higher chance of adverse effect (which in the context of apixaban, this means the poor person who's taken apixaban may get excessive bleeding!).

*Moved data retrieval code to become a Python script (temporarily named as "cyp_drugs.py") instead (likely need to write it as a function code - too many users trying to connect to chembl, to try later)*

```{python}
# from cyp_drugs import chembl_drugs
# chembl_drugs("AMLODIPINE")
```

```{python}
# sql_strong = """
# SELECT
#     MOLECULE_DICTIONARY.chembl_id,
#     MOLECULE_DICTIONARY.pref_name,
#     MOLECULE_DICTIONARY.max_phase,
#     COMPOUND_STRUCTURES.canonical_smiles
# FROM MOLECULE_DICTIONARY
# JOIN COMPOUND_STRUCTURES ON MOLECULE_DICTIONARY.molregno == COMPOUND_STRUCTURES.molregno
# WHERE molecule_dictionary.pref_name IN ("CERITINIB", "CLARITHROMYCIN", "DELAVIRIDINE", "IDELALISIB", "INDINAVIR", "ITRACONAZOLE", "KETOCONAZOLE", "MIBEFRADIL", "NEFAZODONE", "NELFINAVIR", "RIBOCICLIB", "RITONAVIR", "SAQUINAVIR", "TELAPREVIR", "TELITHROMYCIN", "TUCATINIB", "VORICONAZOLE")
# """

# # default query uses the latest ChEMBL version
# df_3a4_strong_inh = chembl_downloader.query(sql_strong)
# # df_3a4_strong_inh.to_csv("strong_3a4_inh.tsv", sep='\t', index=False)
# df_3a4_strong_inh
```

##### **Import and preprocess data**

* Will look at the two largest group of CYP inhibitors first (may need to include substrates and inducers too - depends on how this will go...)

* Any interesting molecular motifs/substructures?

```{python}
# Import tsv files instead
# Strong cyp3a4 inhibitors
df_s_3a4inh = pd.read_csv("strong_3a4_inh.tsv", sep="\t")
df_s_3a4inh
```


```{python}
# Need to update old script "mol_prep.py", esp. on preprocess code, due to recent numpy update! 

# downgrade to numpy 1.26.0 as rdkit's numpy 2 patch is likely going to be included in the next release only (GitHub issue: https://github.com/rdkit/rdkit/pull/7531)

# similar issue with pandas as well - pandas latest release is 2.2.2 which is compatible with numpy 2 - to downgrade version as well

# preprocess canonical smiles 
from mol_prep import preprocess
df_s_3a4inh = df_s_3a4inh.copy()
df_s_3a4inh_p = df_s_3a4inh.apply(preprocess, axis=1)
df_s_3a4inh_p

# error msg - "module 'pandas.io.formats.format' has no attribute 'get_adjustment'" - could be to do with rdkit's pandastool """ Monkey patch an RDKit method of Chem.Mol and pandas """ where something's not right...

# or convert the canonical_smiles into rdkit mols independently (not using preprocess function)
```